@using K_Akica.Blazor.Data.ViewModels
@using KAkica.Communication.Request
@using KAkica.Communication.Response
@using System;

@if (!Model.IsLoaded)
{
    <p><em>Loading...</em></p>
}
else
{



    <MatHeadline3>Poopers</MatHeadline3>
    <MatButton Outlined="@true" OnClick="@ShowDialog">New</MatButton>
    <MatButton Outlined="@true" OnClick="@DeleteSelected">Delete</MatButton>

    <MatList SingleSelection="true" @onkeydown="@ListKeyPressed" >
        @{
            foreach (var pooper in Model.AllPoopers)
            {
                <MatListItem OnClick="@(() => @Model.ChangeSelection(pooper))">
                    @pooper.Name
                </MatListItem>
            }
        }
    </MatList>

    <MatDialogExt @bind-IsOpen="@m_dialogIsOpen" Title="Create new pooper" OnOkClicked="@DialogOkClicked">
        <p>Name:</p>
        <MatTextField @bind-Value="@m_newPooper.Name"></MatTextField>
    </MatDialogExt>
}


@code {
    [Parameter] public PoopersViewModel Model { get; set; }

    private PooperRequest m_newPooper = new PooperRequest();

    private bool m_dialogIsOpen;


    protected override void OnInitialized()
    {
        Model.OnRefreshNeeded += (sender, e) => StateHasChanged();
    }

    async Task DeleteSelected() => await Model.DeleteSelected();
    

    void ShowDialog()
    {
        m_newPooper = new PooperRequest();
        m_dialogIsOpen = true;
    }

    async Task DialogOkClicked()
    {
        //first, close dialog, then call create,
        //since the refresh triggered from create executes before the property is set to false,
        //thefore making the dialog visible once more
        m_dialogIsOpen = false;
        await Model.CreateNew(m_newPooper);
    }

    async Task ListKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Delete")
        {
            await DeleteSelected();
        }
    }

}
